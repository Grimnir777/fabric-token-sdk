// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	api2 "github.com/hyperledger-labs/fabric-smart-client/integration/nwo/api"
)

type TokenPlatform struct {
	GetContextStub        func() api2.Context
	getContextMutex       sync.RWMutex
	getContextArgsForCall []struct{}
	getContextReturns     struct {
		result1 api2.Context
	}
	getContextReturnsOnCall map[int]struct {
		result1 api2.Context
	}
	GetBuilderStub        func() api2.Builder
	getBuilderMutex       sync.RWMutex
	getBuilderArgsForCall []struct{}
	getBuilderReturns     struct {
		result1 api2.Builder
	}
	getBuilderReturnsOnCall map[int]struct {
		result1 api2.Builder
	}
	TokenDirStub        func() string
	tokenDirMutex       sync.RWMutex
	tokenDirArgsForCall []struct{}
	tokenDirReturns     struct {
		result1 string
	}
	tokenDirReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TokenPlatform) GetContext() api2.Context {
	fake.getContextMutex.Lock()
	ret, specificReturn := fake.getContextReturnsOnCall[len(fake.getContextArgsForCall)]
	fake.getContextArgsForCall = append(fake.getContextArgsForCall, struct{}{})
	fake.recordInvocation("GetContext", []interface{}{})
	fake.getContextMutex.Unlock()
	if fake.GetContextStub != nil {
		return fake.GetContextStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getContextReturns.result1
}

func (fake *TokenPlatform) GetContextCallCount() int {
	fake.getContextMutex.RLock()
	defer fake.getContextMutex.RUnlock()
	return len(fake.getContextArgsForCall)
}

func (fake *TokenPlatform) GetContextReturns(result1 api2.Context) {
	fake.GetContextStub = nil
	fake.getContextReturns = struct {
		result1 api2.Context
	}{result1}
}

func (fake *TokenPlatform) GetContextReturnsOnCall(i int, result1 api2.Context) {
	fake.GetContextStub = nil
	if fake.getContextReturnsOnCall == nil {
		fake.getContextReturnsOnCall = make(map[int]struct {
			result1 api2.Context
		})
	}
	fake.getContextReturnsOnCall[i] = struct {
		result1 api2.Context
	}{result1}
}

func (fake *TokenPlatform) GetBuilder() api2.Builder {
	fake.getBuilderMutex.Lock()
	ret, specificReturn := fake.getBuilderReturnsOnCall[len(fake.getBuilderArgsForCall)]
	fake.getBuilderArgsForCall = append(fake.getBuilderArgsForCall, struct{}{})
	fake.recordInvocation("GetBuilder", []interface{}{})
	fake.getBuilderMutex.Unlock()
	if fake.GetBuilderStub != nil {
		return fake.GetBuilderStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getBuilderReturns.result1
}

func (fake *TokenPlatform) GetBuilderCallCount() int {
	fake.getBuilderMutex.RLock()
	defer fake.getBuilderMutex.RUnlock()
	return len(fake.getBuilderArgsForCall)
}

func (fake *TokenPlatform) GetBuilderReturns(result1 api2.Builder) {
	fake.GetBuilderStub = nil
	fake.getBuilderReturns = struct {
		result1 api2.Builder
	}{result1}
}

func (fake *TokenPlatform) GetBuilderReturnsOnCall(i int, result1 api2.Builder) {
	fake.GetBuilderStub = nil
	if fake.getBuilderReturnsOnCall == nil {
		fake.getBuilderReturnsOnCall = make(map[int]struct {
			result1 api2.Builder
		})
	}
	fake.getBuilderReturnsOnCall[i] = struct {
		result1 api2.Builder
	}{result1}
}

func (fake *TokenPlatform) TokenDir() string {
	fake.tokenDirMutex.Lock()
	ret, specificReturn := fake.tokenDirReturnsOnCall[len(fake.tokenDirArgsForCall)]
	fake.tokenDirArgsForCall = append(fake.tokenDirArgsForCall, struct{}{})
	fake.recordInvocation("TokenDir", []interface{}{})
	fake.tokenDirMutex.Unlock()
	if fake.TokenDirStub != nil {
		return fake.TokenDirStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.tokenDirReturns.result1
}

func (fake *TokenPlatform) TokenDirCallCount() int {
	fake.tokenDirMutex.RLock()
	defer fake.tokenDirMutex.RUnlock()
	return len(fake.tokenDirArgsForCall)
}

func (fake *TokenPlatform) TokenDirReturns(result1 string) {
	fake.TokenDirStub = nil
	fake.tokenDirReturns = struct {
		result1 string
	}{result1}
}

func (fake *TokenPlatform) TokenDirReturnsOnCall(i int, result1 string) {
	fake.TokenDirStub = nil
	if fake.tokenDirReturnsOnCall == nil {
		fake.tokenDirReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.tokenDirReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *TokenPlatform) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getContextMutex.RLock()
	defer fake.getContextMutex.RUnlock()
	fake.getBuilderMutex.RLock()
	defer fake.getBuilderMutex.RUnlock()
	fake.tokenDirMutex.RLock()
	defer fake.tokenDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TokenPlatform) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
