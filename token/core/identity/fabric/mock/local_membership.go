// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	fabricplatform "github.com/hyperledger-labs/fabric-smart-client/platform/fabric"
	"github.com/hyperledger-labs/fabric-smart-client/platform/view/view"
	"github.com/hyperledger-labs/fabric-token-sdk/token/core/identity/fabric"
)

type LocalMembership struct {
	DefaultIdentityStub        func() view.Identity
	defaultIdentityMutex       sync.RWMutex
	defaultIdentityArgsForCall []struct{}
	defaultIdentityReturns     struct {
		result1 view.Identity
	}
	defaultIdentityReturnsOnCall map[int]struct {
		result1 view.Identity
	}
	IsMeStub        func(id view.Identity) bool
	isMeMutex       sync.RWMutex
	isMeArgsForCall []struct {
		id view.Identity
	}
	isMeReturns struct {
		result1 bool
	}
	isMeReturnsOnCall map[int]struct {
		result1 bool
	}
	GetIdentityInfoByLabelStub        func(mspType string, label string) *fabricplatform.IdentityInfo
	getIdentityInfoByLabelMutex       sync.RWMutex
	getIdentityInfoByLabelArgsForCall []struct {
		mspType string
		label   string
	}
	getIdentityInfoByLabelReturns struct {
		result1 *fabricplatform.IdentityInfo
	}
	getIdentityInfoByLabelReturnsOnCall map[int]struct {
		result1 *fabricplatform.IdentityInfo
	}
	GetIdentityInfoByIdentityStub        func(mspType string, id view.Identity) *fabricplatform.IdentityInfo
	getIdentityInfoByIdentityMutex       sync.RWMutex
	getIdentityInfoByIdentityArgsForCall []struct {
		mspType string
		id      view.Identity
	}
	getIdentityInfoByIdentityReturns struct {
		result1 *fabricplatform.IdentityInfo
	}
	getIdentityInfoByIdentityReturnsOnCall map[int]struct {
		result1 *fabricplatform.IdentityInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LocalMembership) DefaultIdentity() view.Identity {
	fake.defaultIdentityMutex.Lock()
	ret, specificReturn := fake.defaultIdentityReturnsOnCall[len(fake.defaultIdentityArgsForCall)]
	fake.defaultIdentityArgsForCall = append(fake.defaultIdentityArgsForCall, struct{}{})
	fake.recordInvocation("DefaultIdentity", []interface{}{})
	fake.defaultIdentityMutex.Unlock()
	if fake.DefaultIdentityStub != nil {
		return fake.DefaultIdentityStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.defaultIdentityReturns.result1
}

func (fake *LocalMembership) DefaultIdentityCallCount() int {
	fake.defaultIdentityMutex.RLock()
	defer fake.defaultIdentityMutex.RUnlock()
	return len(fake.defaultIdentityArgsForCall)
}

func (fake *LocalMembership) DefaultIdentityReturns(result1 view.Identity) {
	fake.DefaultIdentityStub = nil
	fake.defaultIdentityReturns = struct {
		result1 view.Identity
	}{result1}
}

func (fake *LocalMembership) DefaultIdentityReturnsOnCall(i int, result1 view.Identity) {
	fake.DefaultIdentityStub = nil
	if fake.defaultIdentityReturnsOnCall == nil {
		fake.defaultIdentityReturnsOnCall = make(map[int]struct {
			result1 view.Identity
		})
	}
	fake.defaultIdentityReturnsOnCall[i] = struct {
		result1 view.Identity
	}{result1}
}

func (fake *LocalMembership) IsMe(id view.Identity) bool {
	fake.isMeMutex.Lock()
	ret, specificReturn := fake.isMeReturnsOnCall[len(fake.isMeArgsForCall)]
	fake.isMeArgsForCall = append(fake.isMeArgsForCall, struct {
		id view.Identity
	}{id})
	fake.recordInvocation("IsMe", []interface{}{id})
	fake.isMeMutex.Unlock()
	if fake.IsMeStub != nil {
		return fake.IsMeStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isMeReturns.result1
}

func (fake *LocalMembership) IsMeCallCount() int {
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	return len(fake.isMeArgsForCall)
}

func (fake *LocalMembership) IsMeArgsForCall(i int) view.Identity {
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	return fake.isMeArgsForCall[i].id
}

func (fake *LocalMembership) IsMeReturns(result1 bool) {
	fake.IsMeStub = nil
	fake.isMeReturns = struct {
		result1 bool
	}{result1}
}

func (fake *LocalMembership) IsMeReturnsOnCall(i int, result1 bool) {
	fake.IsMeStub = nil
	if fake.isMeReturnsOnCall == nil {
		fake.isMeReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isMeReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *LocalMembership) GetIdentityInfoByLabel(mspType string, label string) *fabricplatform.IdentityInfo {
	fake.getIdentityInfoByLabelMutex.Lock()
	ret, specificReturn := fake.getIdentityInfoByLabelReturnsOnCall[len(fake.getIdentityInfoByLabelArgsForCall)]
	fake.getIdentityInfoByLabelArgsForCall = append(fake.getIdentityInfoByLabelArgsForCall, struct {
		mspType string
		label   string
	}{mspType, label})
	fake.recordInvocation("GetIdentityInfoByLabel", []interface{}{mspType, label})
	fake.getIdentityInfoByLabelMutex.Unlock()
	if fake.GetIdentityInfoByLabelStub != nil {
		return fake.GetIdentityInfoByLabelStub(mspType, label)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getIdentityInfoByLabelReturns.result1
}

func (fake *LocalMembership) GetIdentityInfoByLabelCallCount() int {
	fake.getIdentityInfoByLabelMutex.RLock()
	defer fake.getIdentityInfoByLabelMutex.RUnlock()
	return len(fake.getIdentityInfoByLabelArgsForCall)
}

func (fake *LocalMembership) GetIdentityInfoByLabelArgsForCall(i int) (string, string) {
	fake.getIdentityInfoByLabelMutex.RLock()
	defer fake.getIdentityInfoByLabelMutex.RUnlock()
	return fake.getIdentityInfoByLabelArgsForCall[i].mspType, fake.getIdentityInfoByLabelArgsForCall[i].label
}

func (fake *LocalMembership) GetIdentityInfoByLabelReturns(result1 *fabricplatform.IdentityInfo) {
	fake.GetIdentityInfoByLabelStub = nil
	fake.getIdentityInfoByLabelReturns = struct {
		result1 *fabricplatform.IdentityInfo
	}{result1}
}

func (fake *LocalMembership) GetIdentityInfoByLabelReturnsOnCall(i int, result1 *fabricplatform.IdentityInfo) {
	fake.GetIdentityInfoByLabelStub = nil
	if fake.getIdentityInfoByLabelReturnsOnCall == nil {
		fake.getIdentityInfoByLabelReturnsOnCall = make(map[int]struct {
			result1 *fabricplatform.IdentityInfo
		})
	}
	fake.getIdentityInfoByLabelReturnsOnCall[i] = struct {
		result1 *fabricplatform.IdentityInfo
	}{result1}
}

func (fake *LocalMembership) GetIdentityInfoByIdentity(mspType string, id view.Identity) *fabricplatform.IdentityInfo {
	fake.getIdentityInfoByIdentityMutex.Lock()
	ret, specificReturn := fake.getIdentityInfoByIdentityReturnsOnCall[len(fake.getIdentityInfoByIdentityArgsForCall)]
	fake.getIdentityInfoByIdentityArgsForCall = append(fake.getIdentityInfoByIdentityArgsForCall, struct {
		mspType string
		id      view.Identity
	}{mspType, id})
	fake.recordInvocation("GetIdentityInfoByIdentity", []interface{}{mspType, id})
	fake.getIdentityInfoByIdentityMutex.Unlock()
	if fake.GetIdentityInfoByIdentityStub != nil {
		return fake.GetIdentityInfoByIdentityStub(mspType, id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getIdentityInfoByIdentityReturns.result1
}

func (fake *LocalMembership) GetIdentityInfoByIdentityCallCount() int {
	fake.getIdentityInfoByIdentityMutex.RLock()
	defer fake.getIdentityInfoByIdentityMutex.RUnlock()
	return len(fake.getIdentityInfoByIdentityArgsForCall)
}

func (fake *LocalMembership) GetIdentityInfoByIdentityArgsForCall(i int) (string, view.Identity) {
	fake.getIdentityInfoByIdentityMutex.RLock()
	defer fake.getIdentityInfoByIdentityMutex.RUnlock()
	return fake.getIdentityInfoByIdentityArgsForCall[i].mspType, fake.getIdentityInfoByIdentityArgsForCall[i].id
}

func (fake *LocalMembership) GetIdentityInfoByIdentityReturns(result1 *fabricplatform.IdentityInfo) {
	fake.GetIdentityInfoByIdentityStub = nil
	fake.getIdentityInfoByIdentityReturns = struct {
		result1 *fabricplatform.IdentityInfo
	}{result1}
}

func (fake *LocalMembership) GetIdentityInfoByIdentityReturnsOnCall(i int, result1 *fabricplatform.IdentityInfo) {
	fake.GetIdentityInfoByIdentityStub = nil
	if fake.getIdentityInfoByIdentityReturnsOnCall == nil {
		fake.getIdentityInfoByIdentityReturnsOnCall = make(map[int]struct {
			result1 *fabricplatform.IdentityInfo
		})
	}
	fake.getIdentityInfoByIdentityReturnsOnCall[i] = struct {
		result1 *fabricplatform.IdentityInfo
	}{result1}
}

func (fake *LocalMembership) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.defaultIdentityMutex.RLock()
	defer fake.defaultIdentityMutex.RUnlock()
	fake.isMeMutex.RLock()
	defer fake.isMeMutex.RUnlock()
	fake.getIdentityInfoByLabelMutex.RLock()
	defer fake.getIdentityInfoByLabelMutex.RUnlock()
	fake.getIdentityInfoByIdentityMutex.RLock()
	defer fake.getIdentityInfoByIdentityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LocalMembership) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fabric.LocalMembership = new(LocalMembership)
